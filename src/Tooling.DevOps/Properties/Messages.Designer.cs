// <auto-generated />

using System.Resources;

#nullable enable

namespace LanceC.Tooling.DevOps.Properties
{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class Messages
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("LanceC.Tooling.DevOps.Properties.Messages", typeof(Messages).Assembly);

        /// <summary>
        /// Unable to determine the entry assembly.
        /// </summary>
        public static string AssemblyMissing
            => GetString("AssemblyMissing");

        /// <summary>
        /// Unable to determine the version from the entry assembly.
        /// </summary>
        public static string AssemblyVersionMissing
            => GetString("AssemblyVersionMissing");

        /// <summary>
        /// The "Directory.Build.props" file was not found in the repository root.
        /// </summary>
        public static string DirectoryBuildFileMissing
            => GetString("DirectoryBuildFileMissing");

        /// <summary>
        /// No "Version" element was specified in the "Directory.Build.props" file.
        /// </summary>
        public static string DirectoryBuildVersionElementMissing
            => GetString("DirectoryBuildVersionElementMissing");

        /// <summary>
        /// The GitHub access token is missing. It should be contained within the configured file or environment variable.
        /// </summary>
        public static string GitHubTokenMissing
            => GetString("GitHubTokenMissing");

        /// <summary>
        /// No milestone was found with the title '{title}'.
        /// </summary>
        public static string MissingMilestoneFormat(object? title)
            => string.Format(
                GetString("MissingMilestoneFormat", nameof(title)),
                title);

        /// <summary>
        /// Issue #{issueNumber} has more than one {issueClassificationName} label. Skipping...
        /// </summary>
        public static string ReleasableIssueLabelDuplicateFormat(object? issueNumber, object? issueClassificationName)
            => string.Format(
                GetString("ReleasableIssueLabelDuplicateFormat", nameof(issueNumber), nameof(issueClassificationName)),
                issueNumber, issueClassificationName);

        /// <summary>
        /// Issue #{issueNumber} has no {issueClassificationName} label. Skipping...
        /// </summary>
        public static string ReleasableIssueLabelMissingFormat(object? issueNumber, object? issueClassificationName)
            => string.Format(
                GetString("ReleasableIssueLabelMissingFormat", nameof(issueNumber), nameof(issueClassificationName)),
                issueNumber, issueClassificationName);

        /// <summary>
        /// The label prefix '{labelPrefix}' does not correspond to any of the configured label classifications.
        /// </summary>
        public static string ReleasableIssueLabelPrefixInvalidFormat(object? labelPrefix)
            => string.Format(
                GetString("ReleasableIssueLabelPrefixInvalidFormat", nameof(labelPrefix)),
                labelPrefix);

        /// <summary>
        /// Issue #{issueNumber} has a resolution label '{resolutionName}' that could not be identified. Skipping...
        /// </summary>
        public static string ReleasableIssueResolutionLabelInvalidFormat(object? issueNumber, object? resolutionName)
            => string.Format(
                GetString("ReleasableIssueResolutionLabelInvalidFormat", nameof(issueNumber), nameof(resolutionName)),
                issueNumber, resolutionName);

        /// <summary>
        /// {skippedCount} misconfigured issues were skipped. See log for details.
        /// </summary>
        public static string ReleasableIssuesSkippedFormat(object? skippedCount)
            => string.Format(
                GetString("ReleasableIssuesSkippedFormat", nameof(skippedCount)),
                skippedCount);

        /// <summary>
        /// Issue #{issueNumber} has a type label '{typeName}' that could not be identified. Skipping...
        /// </summary>
        public static string ReleasableIssueTypeLabelInvalidFormat(object? issueNumber, object? typeName)
            => string.Format(
                GetString("ReleasableIssueTypeLabelInvalidFormat", nameof(issueNumber), nameof(typeName)),
                issueNumber, typeName);

        /// <summary>
        /// Adding assets to the release...
        /// </summary>
        public static string ReleaseStatusAssetsUpload
            => GetString("ReleaseStatusAssetsUpload");

        /// <summary>
        /// Uploading {fileName}...
        /// </summary>
        public static string ReleaseStatusAssetUploadFormat(object? fileName)
            => string.Format(
                GetString("ReleaseStatusAssetUploadFormat", nameof(fileName)),
                fileName);

        /// <summary>
        /// Completed GitHub deployment successfully.
        /// </summary>
        public static string ReleaseStatusComplete
            => GetString("ReleaseStatusComplete");

        /// <summary>
        /// Encountered a failure during the GitHub deployment. Error: {errorMessage}
        /// </summary>
        public static string ReleaseStatusErrorFormat(object? errorMessage)
            => string.Format(
                GetString("ReleaseStatusErrorFormat", nameof(errorMessage)),
                errorMessage);

        /// <summary>
        /// Getting milestone issues...
        /// </summary>
        public static string ReleaseStatusIssuesRetrieval
            => GetString("ReleaseStatusIssuesRetrieval");

        /// <summary>
        /// Closing milestone...
        /// </summary>
        public static string ReleaseStatusMilestoneClose
            => GetString("ReleaseStatusMilestoneClose");

        /// <summary>
        /// Getting milestone...
        /// </summary>
        public static string ReleaseStatusMilestoneRetrieval
            => GetString("ReleaseStatusMilestoneRetrieval");

        /// <summary>
        /// No releasable issues found. Exiting...
        /// </summary>
        public static string ReleaseStatusNoReleasableIssues
            => GetString("ReleaseStatusNoReleasableIssues");

        /// <summary>
        /// Building release body...
        /// </summary>
        public static string ReleaseStatusReleaseBodyBuild
            => GetString("ReleaseStatusReleaseBodyBuild");

        /// <summary>
        /// Creating release...
        /// </summary>
        public static string ReleaseStatusReleaseCreation
            => GetString("ReleaseStatusReleaseCreation");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name)!;
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}


